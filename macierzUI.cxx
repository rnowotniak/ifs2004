// generated by Fast Light User Interface Designer (fluid) version 1.0105

#include "macierzUI.h"
#include <cstdio>

inline void macierzUI::cb_a_i(Fl_Value_Input*, void* v) {
  ((macierzUI*)v)->do_callback();
}
void macierzUI::cb_a(Fl_Value_Input* o, void* v) {
  ((macierzUI*)(o->parent()->parent()->user_data()))->cb_a_i(o,v);
}

inline void macierzUI::cb_b_i(Fl_Value_Input*, void* v) {
  ((macierzUI*)v)->do_callback();
}
void macierzUI::cb_b(Fl_Value_Input* o, void* v) {
  ((macierzUI*)(o->parent()->parent()->user_data()))->cb_b_i(o,v);
}

inline void macierzUI::cb_c_i(Fl_Value_Input*, void* v) {
  ((macierzUI*)v)->do_callback();
}
void macierzUI::cb_c(Fl_Value_Input* o, void* v) {
  ((macierzUI*)(o->parent()->parent()->user_data()))->cb_c_i(o,v);
}

inline void macierzUI::cb_d_i(Fl_Value_Input*, void* v) {
  ((macierzUI*)v)->do_callback();
}
void macierzUI::cb_d(Fl_Value_Input* o, void* v) {
  ((macierzUI*)(o->parent()->parent()->user_data()))->cb_d_i(o,v);
}

inline void macierzUI::cb_e_i(Fl_Value_Input*, void* v) {
  ((macierzUI*)v)->do_callback();
}
void macierzUI::cb_e(Fl_Value_Input* o, void* v) {
  ((macierzUI*)(o->parent()->parent()->user_data()))->cb_e_i(o,v);
}

inline void macierzUI::cb_f_i(Fl_Value_Input*, void* v) {
  ((macierzUI*)v)->do_callback();
}
void macierzUI::cb_f(Fl_Value_Input* o, void* v) {
  ((macierzUI*)(o->parent()->parent()->user_data()))->cb_f_i(o,v);
}

inline void macierzUI::cb_P_i(Fl_Slider*, void* v) {
  ((macierzUI*)v)->do_callback();
}
void macierzUI::cb_P(Fl_Slider* o, void* v) {
  ((macierzUI*)(o->parent()->parent()->user_data()))->cb_P_i(o,v);
}

macierzUI::macierzUI(int x, int y, int w, int h, const char *label ) : Fl_Group(x, y, w, h, label) {
    { Fl_Group* o = new Fl_Group(0 + x, 0 + y, 210, 71);
      o->box(FL_THIN_DOWN_FRAME);
      { Fl_Box* o = new Fl_Box(0 + x, 5 + y, 51, 18, "u(x,y)=");
        o->labelsize(10);
        o->align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE);
      }
      { Fl_Value_Input* o = a = new Fl_Value_Input(45 + x, 4 + y, 42, 20);
        o->labelsize(10);
        o->minimum(-100);
        o->maximum(100);
        o->step(0.05);
        o->textsize(10);
        o->callback((Fl_Callback*)cb_a, (void*)(this));
      }
      { Fl_Box* o = new Fl_Box(84 + x, 3 + y, 24, 21, "x+");
        o->labelsize(10);
        o->align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE);
      }
      { Fl_Value_Input* o = b = new Fl_Value_Input(103 + x, 4 + y, 42, 20);
        o->labelsize(10);
        o->minimum(-100);
        o->maximum(100);
        o->step(0.05);
        o->textsize(10);
        o->callback((Fl_Callback*)cb_b, (void*)(this));
      }
      { Fl_Box* o = new Fl_Box(144 + x, 3 + y, 24, 21, "y+");
        o->labelsize(10);
        o->align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE);
      }
      { Fl_Value_Input* o = c = new Fl_Value_Input(162 + x, 4 + y, 42, 20);
        o->labelsize(10);
        o->minimum(-100);
        o->maximum(100);
        o->step(0.05);
        o->textsize(10);
        o->callback((Fl_Callback*)cb_c, (void*)(this));
      }
      { Fl_Box* o = new Fl_Box(0 + x, 29 + y, 51, 18, "v(x,y)=");
        o->labelsize(10);
        o->align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE);
      }
      { Fl_Value_Input* o = d = new Fl_Value_Input(45 + x, 29 + y, 42, 20);
        o->labelsize(10);
        o->minimum(-100);
        o->maximum(100);
        o->step(0.05);
        o->textsize(10);
        o->callback((Fl_Callback*)cb_d, (void*)(this));
      }
      { Fl_Box* o = new Fl_Box(84 + x, 29 + y, 24, 19, "x+");
        o->labelsize(10);
        o->align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE);
      }
      { Fl_Value_Input* o = e = new Fl_Value_Input(103 + x, 29 + y, 42, 20);
        o->labelsize(10);
        o->minimum(-100);
        o->maximum(100);
        o->step(0.05);
        o->textsize(10);
        o->callback((Fl_Callback*)cb_e, (void*)(this));
      }
      { Fl_Box* o = new Fl_Box(144 + x, 29 + y, 24, 19, "y+");
        o->labelsize(10);
        o->align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE);
      }
      { Fl_Value_Input* o = f = new Fl_Value_Input(162 + x, 29 + y, 42, 20);
        o->labelsize(10);
        o->minimum(-100);
        o->maximum(100);
        o->step(0.05);
        o->textsize(10);
        o->callback((Fl_Callback*)cb_f, (void*)(this));
      }
      { Fl_Slider* o = P = new Fl_Slider(6 + x, 54 + y, 198, 12);
        o->tooltip("Prawdopodobienstwo");
        o->type(3);
        o->selection_color((Fl_Color)89);
        o->maximum(100);
        o->step(1);
        o->value(20);
        o->callback((Fl_Callback*)cb_P, (void*)(this));
        o->align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE);
      }
      o->end();
  }
  numer = macierzUI::ostatni++;
}

void macierzUI::Resetuj() {
  Ustaw(Macierz());
}

void macierzUI::Ustaw(const Macierz &M) {
  a->value(M.a);
b->value(M.b);
c->value(M.c);
d->value(M.d);
e->value(M.e);
f->value(M.f);
}
unsigned macierzUI::ostatni = 0;
